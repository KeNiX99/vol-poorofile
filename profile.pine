// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Ildar Akhmetgaleev (AkhIL)
// See https://github.com/akhilman/vol-poorofile
// vim: shiftwidth=2 tabstop=2

{# Template settings -#}
{% set n_rows = (n_rows or 40) | int -%}
{% set block_size = (block_size or 200) | int -%}
{% set profile_color = profile_color or 'gray' -%}
{% set visual_row_width = (visual_row_width or 20) | float -%}
{% set max_bars_back = (max_bars_back or 500) | int -%}

//@version=4
study("Poor man's volume profile", "PMVolProf", overlay=true, max_bars_back={{max_bars_back}})

block_size = input({{block_size}}, "Bars in profile block", minval=10, maxval={{max_bars_back}})
visual_row_width = input({{visual_row_width}}, "Visual row width", minval=10)
use_custom_volume_source = input(false, "Use custom volume source")
volume_source_symbol = input("", "Custom volume source symbol", input.symbol)

PROFILE_COLOR = color.{{profile_color}}

custom_volume = use_custom_volume_source ? security(volume_source_symbol, timeframe.period, volume) : volume

////
// Calculate profile
///

block_high = highest(high, block_size)
block_low = lowest(low, block_size)
float block_highest_row_value = na

{% for n in range(n_rows) -%}
float block_row{{n}}_price = na
int block_row{{n}}_width = na
{% endfor %}

if barstate.islast

	block_height = block_high - block_low
	block_row_height =  block_height / {{n_rows}}

	{% for n in range(n_rows) -%}
	block_row{{n}}_low = block_low + block_row_height * {{n}}
	block_row{{n}}_high = block_low + block_row_height * {{n+1}}
	block_row{{n}}_value = 0.0
	{% endfor %}

	for i = 0 to block_size + 1
		n_rows_affected = 0
		{% for n in range(n_rows) -%}
		bar_row{{n}}_value = 0.0
		if low[i] < block_row{{n}}_high and high[i] > block_row{{n}}_low
			bar_row{{n}}_value := custom_volume[i]
			n_rows_affected := n_rows_affected + 1
		{% endfor %}
		{% for n in range(n_rows) -%}
		block_row{{n}}_value := block_row{{n}}_value + bar_row{{n}}_value / n_rows_affected
		{% endfor %}

	{% for n in range(n_rows) -%}
	block_highest_row_value := max(nz(block_highest_row_value), block_row{{n}}_value)
	{% endfor %}

	{% for n in range(n_rows) -%}
	block_row{{n}}_price := (block_row{{n}}_low + block_row{{n}}_high ) / 2
	block_row{{n}}_width := floor(visual_row_width * block_row{{n}}_value / block_highest_row_value)
	{% endfor %}

////
// Draw profile
///

var int first_bar_time = time
if barstate.isfirst
	first_bar_time = time

var line block_high_line = line.new(bar_index, high, bar_index, high, color=PROFILE_COLOR)
var line block_low_line = line.new(bar_index, low, bar_index, low, color=PROFILE_COLOR)
{% for n in range(n_rows) -%}
var line block_row{{n}}_line = line.new(bar_index, close, bar_index, close, width=2, color=PROFILE_COLOR)
{% endfor %}

if barstate.islast
	line.set_xloc(block_high_line, max(time[block_size], first_bar_time), time_close, xloc.bar_time)
	line.set_y1(block_high_line, block_high)
	line.set_y2(block_high_line, block_high)

	line.set_xloc(block_low_line, max(time[block_size], first_bar_time), time_close, xloc.bar_time)
	line.set_y1(block_low_line, block_low)
	line.set_y2(block_low_line, block_low)

	{% for n in range(n_rows) -%}
	line.set_xloc(block_row{{n}}_line, max(time_close[block_row{{n}}_width], first_bar_time), time_close, xloc.bar_time)
	line.set_y1(block_row{{n}}_line, block_row{{n}}_price)
	line.set_y2(block_row{{n}}_line, block_row{{n}}_price)
	{% endfor %}
