// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Ildar Akhmetgaleev (AkhIL)
// See https://github.com/akhilman/vol-poorofile
// vim: shiftwidth=2 tabstop=2

{# Template settings -#}
{% set n_rows = (n_rows or 15) | int -%}
{% set block_size = (block_size or 15) | int -%}
{% set visual_row_width = (visual_row_width or 10) | float -%}
{% set block_colors = (block_colors or 'purple,teal') | split(',') -%}
{% set boundary_color = boundary_color or 'blue' -%}
{% set filter_size = (filter_size or 200) | int -%}
{% set calc_n_blocks_ahead = (calc_n_blocks_ahead or 15) | int -%}
{% set max_bars_back = (max_bars_back or 500) | int -%}

//@version=4
study("Poor man's volume profile", "VPoorof", overlay=true, max_bars_back={{max_bars_back}})

block_size = input({{block_size}}, "Bars in profile block", minval=1, maxval={{max_bars_back//3}})
visual_row_width = input({{visual_row_width}}, "Visual row width", minval=0)
filter_size = input({{filter_size}}, "Profile maximum high pass filter size in bars")
use_custom_volume_source = input(false, "Use custom volume source")
volume_source_symbol = input("", "Custom volume source symbol", input.symbol)
calc_n_blocks_ahead = input({{calc_n_blocks_ahead}}, "Calculate N blocks ahead for last three profiles (Increase value if the last three profiles are displayed incorrectly)")

BOUNARY_COLOR = color.{{boundary_color}}
{%- for color in block_colors %}
PROFILE{{loop.index}}_COLOR = color.{{color}}
{%- endfor %}

custom_volume = use_custom_volume_source ? security(volume_source_symbol, timeframe.period, volume) : volume

////
// Calculate profiles
///

block_index = floor(bar_index / block_size)
block_bar = bar_index % block_size

rolling_high = highest(block_bar + 1)
rolling_low = lowest(block_bar + 1)

block_high = rolling_high[block_bar+1]
block_low = rolling_low[block_bar+1]

// plot(block_high, color=color.green)
// plot(block_low, color=color.green)

row_height = (block_high - block_low) / {{n_rows}}
row_value = custom_volume[block_size] / max(high[block_size] - low[block_size], 1) * max(block_high - block_low, 1)

{% for n in range(n_rows) %}
row{{n}}_low = block_low + row_height * {{n}}
row{{n}}_high = block_low + row_height * {{n+1}}
row{{n}}_value = high[block_size] > row{{n}}_low and low[block_size] < row{{n}}_high ? row_value : 0
row{{n}}_price = (row{{n}}_low + row{{n}}_high ) / 2
{% endfor %}

// plot(row0_value, color=color.red, style=plot.style_linebr)

if block_bar != 0
	{% for n in range(n_rows) -%}
	row{{n}}_value := row{{n}}_value + row{{n}}_value[1]
	{% endfor %}

highest_row_value = 0.0
if block_bar == block_size - 1
	{% for n in range(n_rows) -%}
	highest_row_value := max(row{{n}}_value, highest_row_value)
	{% endfor %}
else
	highest_row_value := highest_row_value[1]

highest_row_value_avg = ema(highest_row_value, filter_size)

// plot(row0_value)
// plot(highest_row_value, color=color.yellow)
// plot(highest_row_value_avg, color=color.blue)

{% for n in range(n_rows) -%}
row{{n}}_width = floor(visual_row_width * row{{n}}_value / highest_row_value_avg)
{% endfor %}

// plot(row0_value, color=color.red, style=plot.style_linebr, offset=-block_size)

////
// Draw history blocks
///
bounds_high_y = block_high[block_bar+1]
bounds_low_y = block_low[block_bar+1]
plot(bounds_high_y, color=BOUNARY_COLOR, style=plot.style_stepline, offset=-block_size*2, title="History block high")
plot(bounds_low_y, color=BOUNARY_COLOR, style=plot.style_stepline, offset=-block_size*2, title="History block low")

{%- for color in block_colors -%}
{%- set pn = (loop.length - loop.index + 1) % loop.length + 1 %}
{%- set num_colors = loop.length %}

history{{pn}}_block_bar = (block_index + {{loop.index}}) % {{num_colors}} * block_size + block_bar

{% for n in range(n_rows) -%}
history{{pn}}_row{{n}}_price = row{{n}}_price[history{{pn}}_block_bar+1]
history{{pn}}_row{{n}}_width = min({{block_size * num_colors - 2}}, row{{n}}_width[history{{pn}}_block_bar+1])
history{{pn}}_row{{n}}_y = history{{pn}}_block_bar <= history{{pn}}_row{{n}}_width ? history{{pn}}_row{{n}}_price : na

{% endfor -%}

{% for n in range(n_rows) -%}
plot(history{{pn}}_row{{n}}_y, color=PROFILE{{pn}}_COLOR, style=plot.style_linebr, linewidth=2, offset=-block_size*2, title="History {{pn}} row {{n}}")
{% endfor -%}
{% endfor %}

////
// Calculate last three blocks
///

level_value(from_i, to_i, row_low, row_high) =>
	val = 0.0
	for i = from_i to to_i
		if low[i] < row_high and high[i] > row_low
			val := val + custom_volume[i] / max(high[i] - low[i], 1) * max((row_high - row_low) * {{n_rows}}, 1)
	val

{% for n in range(n_rows) %}
float recent_row{{n}}_low = na
float recent_row{{n}}_high = na
float recent_row{{n}}_value = na
float recent_row{{n}}_price = na
int recent_row{{n}}_width = na
{% endfor %}

// Estimate bars to end
var int first_bar_time = na
if bar_index == 0
    first_bar_time := time
estimate_bars_to_end = floor((timenow - time) / ((time - first_bar_time) / bar_index))

if estimate_bars_to_end < block_size * (3 + calc_n_blocks_ahead)
	recent_row_height = (rolling_high - rolling_low) / {{n_rows}}
	{% for n in range(n_rows) %}
	recent_row{{n}}_low := rolling_low + recent_row_height * {{n}}
	recent_row{{n}}_high := rolling_low + recent_row_height * {{n+1}}
	recent_row{{n}}_value := level_value(0, block_bar+1, recent_row{{n}}_low, recent_row{{n}}_high)
	recent_row{{n}}_price := (recent_row{{n}}_low + recent_row{{n}}_high ) / 2
	recent_row{{n}}_width := floor(visual_row_width * recent_row{{n}}_value / highest_row_value_avg)
	{% endfor %}

// plot(recent_row0_value, color=color.blue, style=plot.style_linebr)
// plot(recent_row0_high, color=color.blue, style=plot.style_linebr)
// plot(recent_row0_low, color=color.blue, style=plot.style_linebr)

////
// Draw last three blocks
///
{% for rn in range(3) -%}
var line recent{{rn}}_high_line = na
var line recent{{rn}}_low_line = na
{% for n in range(n_rows) -%}
var line recent{{rn}}_row{{n}}_line = na
{% endfor -%}
{% endfor %}

if barstate.islast
	{% for rn in range(3) -%}
	recent{{rn}}_start_i = block_size * {{rn}} + block_bar
	recent{{rn}}_end_i = max(block_size * {{rn}} - (block_size - block_bar) + 1, 0)

	recent{{rn}}_color_n = (block_index[recent{{rn}}_end_i] + 3) % {{block_colors | length}}
	recent{{rn}}_color = {% for color in block_colors -%}
	{% if not loop.first %}else {% endif %}if recent{{rn}}_color_n == {{ loop.index - 1 }}
		color.{{ color }}
	{% endfor %}

	if estimate_bars_to_end[recent{{rn}}_start_i] < block_size * (3 + calc_n_blocks_ahead)
		// high/low bounds
		if na(recent{{rn}}_low_line)
			recent{{rn}}_low_line := line.new(bar_index, high, bar_index, high, color=BOUNARY_COLOR)
		if na(recent{{rn}}_high_line)
			recent{{rn}}_high_line := line.new(bar_index, low, bar_index, low, color=BOUNARY_COLOR)

		line.set_x1(recent{{rn}}_high_line, bar_index - recent{{rn}}_start_i)
		line.set_x2(recent{{rn}}_high_line, bar_index - recent{{rn}}_end_i)
		line.set_y1(recent{{rn}}_high_line, rolling_high[recent{{rn}}_end_i])
		line.set_y2(recent{{rn}}_high_line, rolling_high[recent{{rn}}_end_i])

		line.set_x1(recent{{rn}}_low_line, bar_index - recent{{rn}}_start_i)
		line.set_x2(recent{{rn}}_low_line, bar_index - recent{{rn}}_end_i)
		line.set_y1(recent{{rn}}_low_line, rolling_low[recent{{rn}}_end_i])
		line.set_y2(recent{{rn}}_low_line, rolling_low[recent{{rn}}_end_i])

		// profile rows
		{% for n in range(n_rows) -%}
		if na(recent{{rn}}_row{{n}}_line)
			recent{{rn}}_row{{n}}_line := line.new(bar_index, close, bar_index, close, width=2)
		{% endfor %}

		{% for n in range(n_rows) %}
		line.set_x1(recent{{rn}}_row{{n}}_line, bar_index - recent{{rn}}_start_i)
		line.set_x2(recent{{rn}}_row{{n}}_line, bar_index - max(recent{{rn}}_start_i - recent_row{{n}}_width[recent{{rn}}_end_i], 0))
		line.set_y1(recent{{rn}}_row{{n}}_line, recent_row{{n}}_price[recent{{rn}}_end_i])
		line.set_y2(recent{{rn}}_row{{n}}_line, recent_row{{n}}_price[recent{{rn}}_end_i])
		line.set_color(recent{{rn}}_row{{n}}_line, recent{{rn}}_color)
		{% endfor %}

		0

	else

		if not na(recent{{rn}}_low_line)
			line.delete(recent{{rn}}_low_line)
			recent{{rn}}_low_line := na
		if not na(recent{{rn}}_high_line)
			line.delete(recent{{rn}}_high_line)
			recent{{rn}}_high_line := na
		{% for n in range(n_rows) %}
		if not na(recent{{rn}}_row{{n}}_line)
			line.delete(recent{{rn}}_row{{n}}_line)
			recent{{rn}}_row{{n}}_line := na
		{% endfor %}

		0
	{% endfor %}
